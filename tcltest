#!/bin/bash

# Variables
WORK_DIR=$(pwd)
SERVER_HOST=127.0.0.1
REPO_URL="git@github.com:DiceDB/dice.git"
CLONE_DIR="dice"  # Directory to clone into if no arg is provided
SERVER_PORT=7379
SERVER_CMD="air"
TEST_CMD="./runtest --host $SERVER_HOST --port $SERVER_PORT --tags -needs:debug --tags -cluster:skip"
SERVER_PID_FILE="$WORK_DIR/server.pid"
PATCH_DIR="dice-patch"
PATCH_FILE_NAME="tcltest.patch"
ABS_PATH_PATCH_FILE="$WORK_DIR/$PATCH_DIR/$PATCH_FILE_NAME"

# Function to clone the repository
clone_repo() {
  if [ -d "$CLONE_DIR" ]; then
    echo "Directory '$CLONE_DIR' exists. Removing it to fetch latest master."
    rm -rf "$CLONE_DIR"
  fi
  git clone "$REPO_URL" "$CLONE_DIR" || { echo "Error cloning repository."; exit 1; }
}

# Function to apply patch
apply_patch() {
  git apply "$ABS_PATH_PATCH_FILE" || { echo "Patch apply failed. Aborting."; exit 1; }
  echo "Patch applied successfully."
}

# Function to start the server
start_server() {
  export TCL_TESTS=true
  if ! command -v air &>/dev/null; then
    echo "'air' not found, running 'go run main.go'..."
    go run main.go &
  else
    echo "'air' found, running 'air'..."
    $SERVER_CMD &
  fi
  SERVER_PID=$!
  echo "$SERVER_PID" > "$SERVER_PID_FILE"
  sleep 5  # Adjust based on server startup time
}

# Function to run tests
run_tests() {
  echo "Running tests..."
  $TEST_CMD
  return $?
}

# Function to stop server
stop_server() {
  echo "Stopping the server..."
  kill "$SERVER_PID"
  rm -f "$SERVER_PID_FILE"
}

# Main script execution
if [ -z "$1" ]; then
  echo "No directory path provided. Cloning repository..."
  clone_repo
  TARGET_DIR="$CLONE_DIR"
else
  TARGET_DIR="$1"
fi

# Ensure target directory exists
if [ ! -d "$TARGET_DIR" ]; then
  echo "Error: Directory '$TARGET_DIR' does not exist."
  exit 1
fi

# Navigate to target directory and apply patch
cd "$TARGET_DIR" || exit
apply_patch

# Start the server
start_server

# Switch back to working directory and run tests
cd "$WORK_DIR"
run_tests
TEST_EXIT_CODE=$?

# Stop the server
stop_server

# Remove the cloned directory if we cloned it
if [ "$TARGET_DIR" == "$CLONE_DIR" ]; then
  echo "Removing cloned directory '$CLONE_DIR'..."
  rm -rf "$CLONE_DIR"
fi

# Exit with test command exit code
exit $TEST_EXIT_CODE
